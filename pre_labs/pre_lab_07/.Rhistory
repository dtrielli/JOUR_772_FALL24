knitr::opts_chunk$set(echo = TRUE)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
sports_political_donations <- read_csv("data/sports-political-donations.csv") |>
clean_names()
library(tidyverse)
library(janitor)
library(lubridate)
library(dplyr)
install.packages("readr")
library(readr)
install.packages("readr")
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
sports_political_donations <- read_csv("data/sports-political-donations.csv") |>
clean_names()
sports_political_donations <- sports_political_donations |>
mutate(
owner = str_to_upper(owner),
team = str_to_upper(team),
recipient = str_to_upper(recipient),
party = str_to_upper(party),
amount = gsub(",", "", amount),
amount = gsub("\\$", "", amount),
amount = as.double(amount)
)
# I have used gsub() before, but I didn't consider that "$" is an R function and used ChatGPT to figure out that the "\\" were necessary to remove them from the df using gsub().
# I gave this prompt: "hi chatgpt how do i remove $ from a dataset in R using gsub()"
# It gave this response: data$price <- gsub("\\$", "", data$price)
# I instantly realized why the $ wasn't reading before and rewrote my code with backslashes
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
# Clean required data and prepare for analysis if needed.
sports_political_donations <- read_csv("data/sports-political-donations.csv") |>
clean_names()
sports_political_donations <- sports_political_donations |>
mutate(
owner = str_to_upper(owner),
team = str_to_upper(team),
recipient = str_to_upper(recipient),
party = str_to_upper(party),
new_amount = parse_number(amount)
)
# I have used gsub() before, but I didn't consider that "$" is an R function and used ChatGPT to figure out that the "\\" were necessary to remove them from the df using gsub().
# I gave this prompt: "hi chatgpt how do i remove $ from a dataset in R using gsub()"
# It gave this response: data$price <- gsub("\\$", "", data$price)
# I instantly realized why the $ wasn't reading before and rewrote my code with backslashes
View(sports_political_donations)
# Put code to reverse engineer sentence here
top_donors <- sports_political_donations |>
group_by(owner) |>
summarize(donations = sum(amount)) |>
arrange(desc(donations)) |>
top_n(40)
# Put code to reverse engineer sentence here
top_donors <- sports_political_donations |>
group_by(owner) |>
summarize(donations = sum(new_amount)) |>
arrange(desc(donations)) |>
top_n(40)
View(top_donors)
top_donors$owner
top_donor_list <- list(top_donors$owner)
View(top_donor_list)
top_donor_list <- to.list(top_donors$owner)
top_donor_list <- to_list(top_donors$owner)
top_donor_list <- ls(top_donors$owner)
top_donors$owner
sports_political_donations |> filter(owner in top_donors$owner)
# Put code to reverse engineer sentence here
top_donors <- sports_political_donations |>
group_by(owner) |>
summarize(donations = sum(new_amount)) |>
arrange(desc(donations)) |>
top_n(40)
# Display results of code below this codeblock
sports_political_donations |> group_by(owner,party) |> summarize(sum(new_amount))
all_donors <- sports_political_donations |> group_by(owner,party) |> summarize(sum(new_amount))
View(all_donors)
View(all_donors)
top_donors |> left_join(all_donors)
join_test <- top_donors |> left_join(all_donors)
join_test |> group_by(onwer) |> summarize(sum(new_amount))
join_test |> group_by(owner) |> summarize(sum(new_amount))
View(join_test)
join_test |> group_by(owner) |> summarize(sum(donations))
# Put code to reverse engineer sentence here
top_donors <- sports_political_donations |>
group_by(owner) |>
summarize(donations = sum(new_amount)) |>
arrange(desc(donations)) |>
top_n(40)
all_donors <- sports_political_donations |> group_by(owner,party) |> summarize(donations = sum(new_amount))
join_test <- top_donors |> left_join(all_donors)
join_test |> group_by(owner) |> summarize(sum(donations))
# Display results of code below this codeblock
View(join_test)
all_donors <- sports_political_donations |> group_by(owner,party) |> summarize(total_donations = sum(new_amount))
join_test <- top_donors |> left_join(all_donors)
View(join_test)
# Put code to reverse engineer sentence here
top_donors <- sports_political_donations |>
group_by(owner) |>
summarize(total_donations = sum(new_amount)) |>
arrange(desc(donations)) |>
top_n(40)
# Put code to reverse engineer sentence here
top_donors <- sports_political_donations |>
group_by(owner) |>
summarize(total_donations = sum(new_amount)) |>
arrange(desc(total_donations)) |>
top_n(40)
all_donors <- sports_political_donations |> group_by(owner,party) |> summarize(party_donations = sum(new_amount))
join_test <- top_donors |> left_join(all_donors)
join_test |> group_by(owner) |> summarize(sum(donations))
join_test |> group_by(owner) |> summarize(sum(party_donations))
View(join_test)
join_test |> group_by(owner) |> summarize(sum(party_donations))
View(join_test)
join_test |> filter(party == 'REPUBLICAN') |> summarize(sum(party_donations))
top_donors |> summarize(sum(party_donation)
top_donors |> summarize(sum(party_donation))
top_donors |> summarize(sum(party_donation))
top_donors |> summarize(sum(total_donations))
join_test |> filter(party == 'REPUBLICAN') |> summarize(sum(party_donations)) / top_donors |> summarize(sum(total_donations))
